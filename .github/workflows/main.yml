name: CI/CD 工作流

# 触发工作流的事件
on:
  push:
    branches: [ "main" ]  # 推送到main分支时触发
  pull_request:
    branches: [ "main" ]  # main分支收到pull request时触发
  workflow_dispatch:      # 允许手动触发工作流

# 工作流程中的任务
jobs:
  test:
    name: 构建和测试
    runs-on: ubuntu-latest  # 在最新版Ubuntu上运行
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]  # 测试多个Node.js版本
      fail-fast: false  # 某个版本失败时继续测试其他版本

    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 设置 Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 安装依赖
      working-directory: backend
      run: |
        npm ci
        npm install -D eslint@8.56.0  # 安装特定版本的ESLint

    - name: 运行代码检查
      working-directory: backend
      run: npx eslint .

    - name: 创建环境变量文件
      working-directory: backend
      run: |
        echo "API_KEY=${{ secrets.API_KEY }}" > .env

    - name: 运行测试
      working-directory: backend
      run: npm test
      env:
        API_KEY: ${{ secrets.API_KEY }}

  deploy:
    name: 部署应用
    needs: test  # 需要测试任务成功完成
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # 只在main分支的推送事件上部署

    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 设置 Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 安装依赖
      working-directory: backend
      run: npm ci

    - name: 部署应用
      working-directory: backend
      run: |
        echo "开始部署应用..."
        # 这里添加实际的部署命令
      env:
        API_KEY: ${{ secrets.API_KEY }}

    - name: 部署状态通知
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 部署成功完成！"
        else
          echo "❌ 部署失败！"
          exit 1
        fi

  notify:
    name: 发送通知
    needs: [test, deploy]  # 等待所有任务完成
    runs-on: ubuntu-latest
    if: always()  # 总是运行通知任务

    steps:
    - name: 检查工作流状态
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✨ CI/CD 工作流程已成功完成！"
        else
          echo "⚠️ CI/CD 工作流程完成，但存在失败的任务："
          echo "测试状态: ${{ needs.test.result }}"
          echo "部署状态: ${{ needs.deploy.result }}"
          exit 1
        fi